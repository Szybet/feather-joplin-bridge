// Misunderstood the API
/*
        let mut search_for: bool = false;
        if folder_path == "/" {
            debug!("Root directory selected");
        } else {
            debug!(
                "Selected directory: {}. We will need to search for it's id",
                folder_path
            );
            search_for = true;
        }

        let mut request = format!("http://127.0.0.1:41184/{}{}", "/folders", self.token_string);
        let mut responses = self.request_pages_iterate(&mut request).unwrap();

        // uh, to create folders from first page
        let first_page: FoldersGet = serde_json::from_str(responses.remove(0).as_str())?;
        let mut folders = Vec::new();

        for response in responses {
            let mut page: FoldersGet = serde_json::from_str(response.as_str())?;
            folders.append(&mut page.items);
        }

        debug!("Root: Got folders: {:#?}", folders);
        debug!("Root: There are {} folders", folders.len());

        // Actual searching for the sub folder
        if search_for {
            let mut id = String::new();
            let mut count = 0;
            for one_folder in folders.into_iter() {
                if one_folder.title == folder_path {
                    count += 1;
                    id = one_folder.id;
                }
            }
            if count == 0 {
                error!("There is no such folder {}", folder_path);
                return Err(Box::new(MyError("Folder doesn't exist".into())));

            } else if count > 1 {
                warn!("There are more directories of the same name");
                return Err(Box::new(MyError("Duplicate name".into())));
            } else {
                let mut request_id = format!(
                    "http://127.0.0.1:41184/folders/:{}{}",
                    id, self.token_string
                );
                debug!("Request of specific folder: {}", request_id);
                let mut responses = self.request_pages_iterate(&mut request_id).unwrap();

                let first_page: FoldersGet = serde_json::from_str(responses.remove(0).as_str())?;
                let mut folders_id;

                for response in responses {
                    let mut page: FoldersGet = serde_json::from_str(response.as_str())?;
                    folders_id.Folders.append(&mut page.items);
                }

                debug!("Inside: Got folders: {:#?}", folders_id);
                debug!("Inside: There are {} folders", folders_id.Folders.len());

                return Result::Ok(folders_id);
            }
        }
        Result::Ok(folders)
*/